<!DOCTYPE html>
<html lang="pt-BR">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Dashboard</title>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- DataTables CSS -->
  <link href="https://cdn.datatables.net/1.11.5/css/dataTables.bootstrap5.min.css" rel="stylesheet">
  <!-- Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>

<body>
  <div class="container mt-5">
    <h1 class="mb-4">Dashboard</h1>

    <div class="row">
      <!-- Gráfico de Dailies por Turma -->
      <div class="col-md-6">
        <div style="max-width: 600px;">
          <canvas id="dailyChart"></canvas>
        </div>
      </div>

      <!-- Resumo de Dailies por Email -->
      <div class="col-md-6">
        <h3>Resumo de Dailies por Email</h3>
        <div class="mb-3">
          <label for="turmaSelect" class="form-label">Selecione a Turma:</label>
          <select id="turmaSelect" class="form-select">
            <!-- Opções serão preenchidas dinamicamente -->
          </select>
        </div>
        <div class="mb-3">
          <label for="grupoSelect" class="form-label">Selecione o Grupo:</label>
          <select id="grupoSelect" class="form-select">
            <!-- Opções serão preenchidas dinamicamente -->
          </select>
        </div>
        <table id="email-summary-table" class="table table-striped table-bordered" style="display: none;">
          <thead>
            <tr>
              <th>Email</th>
              <th>Dailies</th>
            </tr>
          </thead>
          <tbody id="email-summary-table-body">
            <!-- Dados serão inseridos aqui -->
          </tbody>
        </table>
      </div>
    </div>

    <!-- Tabela Principal -->
    <table id="registers-table" class="table table-striped table-bordered mt-4">
      <thead>
        <tr>
          <th>Email</th>
          <th>Turma</th>
          <th>Grupo</th>
          <th>Impedimento</th>
          <th>Grooming</th>
        </tr>
      </thead>
      <tbody id="registers-table-body">
        <!-- Dados serão inseridos aqui -->
      </tbody>
    </table>
  </div>

  <!-- jQuery -->
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <!-- Bootstrap JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <!-- DataTables JS -->
  <script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
  <script src="https://cdn.datatables.net/1.11.5/js/dataTables.bootstrap5.min.js"></script>

  <!-- Chart.js para gráfico de barras -->
  <script>
    async function fetchRegisters() {
      try {
        const response = await fetch('/register');
        const registers = await response.json();

        const tableBody = document.getElementById('registers-table-body');
        tableBody.innerHTML = '';

        // Arrays para armazenar dados de dailies por turma e por email
        const dailyCountsByClass = {};
        const dailyCountsByEmail = {};

        registers.forEach(register => {
          const row = document.createElement('tr');

          // Adicionar dados à tabela principal
          const emailCell = document.createElement('td');
          emailCell.textContent = register.email;
          row.appendChild(emailCell);

          const turmaCell = document.createElement('td');
          turmaCell.textContent = register.turma;
          row.appendChild(turmaCell);

          const grupoCell = document.createElement('td');
          grupoCell.textContent = register.grupo;
          row.appendChild(grupoCell);

          const impedimentoCell = document.createElement('td');
          impedimentoCell.textContent = register.impedimento || '';
          row.appendChild(impedimentoCell);

          const groomingCell = document.createElement('td');
          groomingCell.textContent = register.grooming || '';
          row.appendChild(groomingCell);

          tableBody.appendChild(row);

          // Contar dailies por turma
          if (!dailyCountsByClass[register.turma]) {
            dailyCountsByClass[register.turma] = {};
          }

          // Contar dailies por email
          const emailKey = register.email;
          if (!dailyCountsByClass[register.turma][emailKey]) {
            dailyCountsByClass[register.turma][emailKey] = 0;
          }
          dailyCountsByClass[register.turma][emailKey]++;
        });

        // Criar o gráfico de dailies por turma
        const classLabels = Object.keys(dailyCountsByClass);
        const classData = classLabels.map(turma => {
          const emails = dailyCountsByClass[turma];
          return Object.keys(emails).length; // Número de emails únicos por turma
        });

        const ctx = document.getElementById('dailyChart').getContext('2d');
        new Chart(ctx, {
          type: 'bar',
          data: {
            labels: classLabels,
            datasets: [{
              label: 'Dailies por Turma',
              data: classData,
              backgroundColor: 'rgba(54, 162, 235, 0.2)',
              borderColor: 'rgba(54, 162, 235, 1)',
              borderWidth: 1
            }]
          },
          options: {
            scales: {
              y: {
                beginAtZero: true,
                precision: 0
              }
            },
            plugins: {
              legend: {
                display: false
              }
            }
          }
        });

        // Preencher o dropdown de turmas
        const turmaSelect = document.getElementById('turmaSelect');
        turmaSelect.innerHTML = '';
        classLabels.forEach(turma => {
          const option = document.createElement('option');
          option.value = turma;
          option.textContent = turma;
          turmaSelect.appendChild(option);
        });

        // Função para preencher o dropdown de grupos baseado na turma selecionada
        function populateGrupoDropdown(selectedTurma) {
          const grupoSelect = document.getElementById('grupoSelect');
          grupoSelect.innerHTML = '';

          // Obter os grupos únicos para a turma selecionada
          const grupos = Object.keys(dailyCountsByClass[selectedTurma] || {});

          grupos.forEach(grupo => {
            const option = document.createElement('option');
            option.value = grupo;
            option.textContent = grupo;
            grupoSelect.appendChild(option);
          });

          // Mostrar a tabela de resumo ao selecionar um grupo
          grupoSelect.addEventListener('change', function () {
            const selectedGrupo = grupoSelect.value;
            showEmailSummary(selectedTurma, selectedGrupo);
          });
        }

        // Mostrar resumo de emails para a turma e grupo selecionados
        function showEmailSummary(turma, grupo) {
          const emailSummaryTable = document.getElementById('email-summary-table');
          const emailSummaryTableBody = document.getElementById('email-summary-table-body');
          emailSummaryTableBody.innerHTML = '';

          const emails = dailyCountsByClass[turma] || {};
          let emailsToShow = Object.keys(emails).map(email => ({ email, dailies: emails[email] }));

          if (grupo !== 'Todos') {
            emailsToShow = emailsToShow.filter(({ email }) => emails[email] === grupo);
          }

          emailsToShow.forEach(({ email, dailies }) => {
            const row = document.createElement('tr');

            const emailCell = document.createElement('td');
            emailCell.textContent = email;
            row.appendChild(emailCell);

            const dailiesCell = document.createElement('td');
            dailiesCell.textContent = dailies;
            row.appendChild(dailiesCell);

            emailSummaryTableBody.appendChild(row);
          });

          // Exibir a tabela de resumo
          emailSummaryTable.style.display = emailsToShow.length > 0 ? 'table' : 'none';
        }

        // Inicializa DataTables com paginação na tabela principal
        $('#registers-table').DataTable({
          language: {
            url: '//cdn.datatables.net/plug-ins/1.11.5/i18n/Portuguese-Brasil.json'
          },
          pagingType: 'full_numbers', // Tipo de paginação
          lengthMenu: [5, 10, 25, 50], // Opções de quantidade de registros por página
          pageLength: 10 // Registros por página inicial
        });

        // Preencher o dropdown de grupos ao selecionar uma turma
        turmaSelect.addEventListener('change', function () {
          const selectedTurma = turmaSelect.value;
          populateGrupoDropdown(selectedTurma);
        });

        // Inicializa o dropdown de grupos com a primeira turma disponível
        if (classLabels.length > 0) {
          populateGrupoDropdown(classLabels[0]);
        }
      } catch (error) {
        console.error('Erro ao buscar os registros:', error);
      }
    }

    // Chama a função para buscar e exibir os registros quando a página carrega
    window.onload = fetchRegisters;
  </script>
</body>
</html>
