<!DOCTYPE html>
<html lang="pt-BR">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Exemplo de Integração com Sails - Pull Requests</title>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.0/dist/chart.min.js"></script>
  <style>
    .kpi-box {
      border: 1px solid #ddd;
      padding: 10px;
      margin-bottom: 20px;
      background-color: #f9f9f9;
    }
  </style>
</head>

<body>
  <div class="container mt-5">
    <!-- Dropdown para seleção de repositório -->
    <div class="mb-3">
      <label for="repoSelect" class="form-label">Selecione um repositório:</label>
      <select id="repoSelect" class="form-select">
        <option value="" selected disabled>Selecione um repositório...</option>
      </select>
    </div>

    <!-- KPIs -->
    <div class="kpi-box">
      <h3>Resumo dos Pull Requests</h3>
      <p>Total de PRs: <span id="totalPRs"></span></p>
      <p>PRs Abertos: <span id="openPRs"></span></p>
      <p>PRs Fechados: <span id="closedPRs"></span></p>
    </div>

    <!-- Gráfico de PRs por Autor -->
    <div class="mb-5">
      <canvas id="prsPorAutorChart" width="400" height="200"></canvas>
    </div>

    <!-- Filtro por Autor e Mensagem -->
    <div class="mb-3">
      <label for="filterAuthor" class="form-label">Filtrar por Autor:</label>
      <input type="text" id="filterAuthor" class="form-control" placeholder="Digite o nome do autor...">
    </div>
    <div class="mb-3">
      <label for="filterMessage" class="form-label">Filtrar por Mensagem:</label>
      <input type="text" id="filterMessage" class="form-control" placeholder="Digite a mensagem do PR...">
    </div>

    <!-- Tabela de Pull Requests -->
    <div class="table-responsive mb-5">
      <table id="prTable" class="table table-striped table-bordered">
        <thead class="table-dark">
          <tr>
            <th>Título</th>
            <th>Data</th>
            <th>Autor</th>
            <th>Link</th>
          </tr>
        </thead>
        <tbody>
          <!-- Linhas de PRs serão adicionadas dinamicamente aqui -->
        </tbody>
      </table>
    </div>
  </div>

  <!-- Bootstrap JS (opcional, se necessário) -->
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/5.1.3/js/bootstrap.bundle.min.js"></script>

  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const repoSelect = document.getElementById('repoSelect');
      const totalPRsElem = document.getElementById('totalPRs');
      const openPRsElem = document.getElementById('openPRs');
      const closedPRsElem = document.getElementById('closedPRs');
      const prsPorAutorCtx = document.getElementById('prsPorAutorChart').getContext('2d');
      const filterAuthorInput = document.getElementById('filterAuthor');
      const filterMessageInput = document.getElementById('filterMessage');

      // Evento para carregar PRs ao selecionar um repositório
      repoSelect.addEventListener('change', function () {
        const selectedRepo = this.value;
        if (selectedRepo) {
          loadPRs(selectedRepo);
        } else {
          clearPRsTable();
        }
      });

      // Eventos para filtrar PRs ao digitar no filtro por Autor e Mensagem
      filterAuthorInput.addEventListener('input', applyFilters);
      filterMessageInput.addEventListener('input', applyFilters);

      // Função para aplicar filtros na tabela de PRs
      function applyFilters() {
        const filterAuthor = filterAuthorInput.value.toLowerCase();
        const filterMessage = filterMessageInput.value.toLowerCase();
        const rows = document.querySelectorAll('#prTable tbody tr');

        rows.forEach(row => {
          const author = row.cells[2].textContent.toLowerCase();
          const message = row.cells[0].textContent.toLowerCase();
          if (author.includes(filterAuthor) && message.includes(filterMessage)) {
            row.style.display = '';
          } else {
            row.style.display = 'none';
          }
        });
      }

      // Função para carregar os PRs para um repositório específico
      async function loadPRs(repoName) {
        try {
          const headers = new Headers();
          headers.append('repo_name', repoName); // Passa o repo_name como cabeçalho

          const response = await fetch('/getprs', {
            method: 'GET',
            headers: headers
          });
          const data = await response.json();

          console.log('Dados recebidos dos PRs:', data); // Verifica os dados recebidos no console

          // Calcular os KPIs
          const totalPRs = data.rowCount || 0;
          const openPRs = data.rows.filter(pr => pr.closed_at).length; // PRs fechados
          const closedPRs = data.rows.filter(pr => !pr.closed_at).length; // PRs abertos

          // Atualizar os KPIs na interface
          totalPRsElem.textContent = totalPRs;
          openPRsElem.textContent = openPRs;
          closedPRsElem.textContent = closedPRs;

          // Calcular PRs por autor
          const prsPorAutor = calcularPRsPorAutor(data.rows);

          // Atualizar o gráfico de PRs por autor
          updatePRsPorAutorChart(prsPorAutor);

          const prTableBody = document.querySelector('#prTable tbody');
          prTableBody.innerHTML = ''; // Limpa as linhas existentes

          if (data.rows && data.rows.length > 0) {
            // Adicionar linhas de PRs na tabela
            data.rows.forEach(pr => {
              const row = document.createElement('tr');
              row.innerHTML = `
                <td>${pr.message}</td>
                <td>${pr.date ? new Date(pr.date).toLocaleDateString('pt-BR') : ''}</td>
                <td>${pr.author}</td>
                <td><a href="${pr.url}" target="_blank">Ver</a></td>
              `;
              prTableBody.appendChild(row);
            });
          } else {
            console.log('Nenhum Pull Request encontrado para este repositório.');
          }
        } catch (error) {
          console.error('Erro ao carregar Pull Requests:', error);
        }
      }

      // Função para calcular a quantidade de PRs por autor
      function calcularPRsPorAutor(prs) {
        const prsPorAutor = {};
        prs.forEach(pr => {
          const author = pr.author;
          if (prsPorAutor[author]) {
            prsPorAutor[author]++;
          } else {
            prsPorAutor[author] = 1;
          }
        });
        return prsPorAutor;
      }

      // Função para atualizar o gráfico de PRs por autor
      function updatePRsPorAutorChart(prsPorAutorData) {
        const labels = Object.keys(prsPorAutorData);
        const data = Object.values(prsPorAutorData);

        const prsPorAutorChart = new Chart(prsPorAutorCtx, {
          type: 'bar',
          data: {
            labels: labels,
            datasets: [{
              label: 'Quantidade de PRs por Autor',
              data: data,
              backgroundColor: 'rgba(54, 162, 235, 0.5)',
              borderColor: 'rgba(54, 162, 235, 1)',
              borderWidth: 1
            }]
          },
          options: {
            scales: {
              y: {
                beginAtZero: true,
                ticks: {
                  stepSize: 1
                }
              }
            }
          }
        });
      }

      // Função para limpar a tabela de PRs
      function clearPRsTable() {
        const prTableBody = document.querySelector('#prTable tbody');
        prTableBody.innerHTML = ''; // Limpa as linhas existentes
      }

      // Função para carregar os nomes dos repositórios disponíveis
      async function loadRepoNames() {
        try {
          const response = await fetch('/repo_names');
          const data = await response.json();

          if (data.rows && data.rows.length > 0) {
            const repoNames = data.rows.map(row => row.repo_name);

            // Atualiza a lista de repositórios no dropdown
            repoSelect.innerHTML = ''; // Limpa as opções existentes

            repoNames.forEach(repo => {
              const option = document.createElement('option');
              option.textContent = repo;
              option.value = repo;
              repoSelect.appendChild(option);
            });
          } else {
            console.log('Nenhum repositório encontrado.');
          }
        } catch (error) {
          console.error('Erro ao carregar repositórios:', error);
        }
      }

      // Carregar nomes dos repositórios ao iniciar
      loadRepoNames();
    });
  </script>
</body>

</html>
